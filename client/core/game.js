// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['core/drawingArea'], function(DrawingArea) {
  var DrawThisGame;
  return DrawThisGame = (function(_super) {

    __extends(DrawThisGame, _super);

    DrawThisGame.prototype.entities = [];

    DrawThisGame.prototype.drawingArea = null;

    DrawThisGame.prototype.user = {
      lastMouse: {
        x: 0,
        y: 0
      }
    };

    findUIThing;


    DrawThisGame.prototype.mode = {
      current: 'waitfordrawing',
      waitfordrawing: function(dt) {
        if (atom.input.down('touchfinger') || atom.input.down('mouseleft')) {
          if (this.findUIThing(this.drawingArea)) {
            this.mode.current = 'drawing';
          }
        }
        return this.user.lastMouse = {
          x: atom.input.mouse.x,
          y: atom.input.mouse.y
        };
      },
      drawing: function(dt) {
        if (atom.input.up('touchfinger') || atom.input.up('mouseleft')) {
          this.mode.current = 'drawing';
        }
        return this.user.lastMouse = {
          x: atom.input.mouse.x,
          y: atom.input.mouse.y
        };
      },
      predrawing: function(dt) {
        return this.updateEntities();
      }
    };

    DrawThisGame.prototype.draw = function() {
      atom.context.clear();
      this.drawingArea.draw();
    };

    function DrawThisGame() {
      this.registerInputs();
      this.drawingArea = new DrawingArea();
    }

    DrawThisGame.prototype.registerInputs = function() {
      atom.input.bind(atom.button.LEFT, 'mouseleft');
      return atom.input.bind(atom.touch.TOUCHING, 'touchfinger');
    };

    DrawThisGame.prototype.update = function(dt) {
      return this.mode[this.mode.current].apply(this, [dt]);
    };

    return DrawThisGame;

  })(atom.Game);
});

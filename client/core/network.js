// Generated by CoffeeScript 1.4.0

define(function() {
  var Network;
  return Network = (function() {

    Network.prototype.connected = false;

    Network.prototype.game = null;

    Network.prototype.socket = null;

    Network.prototype.id = null;

    Network.prototype.name = null;

    Network.prototype.role = null;

    Network.prototype.room = 'lobby';

    Network.prototype.whoseTurn = null;

    function Network(params) {
      var k, v;
      for (k in params) {
        v = params[k];
        this[k] = v;
      }
      if (this.game == null) {
        throw 'game was not set!';
      }
      if (this.socket == null) {
        throw 'socket was not set!';
      }
      this.registerClientEvents();
    }

    Network.prototype.registerClientEvents = function() {
      var e, _i, _len, _ref, _results,
        _this = this;
      _ref = ['playerlist', 'canvaspage', 'canvasline', 'chatmsg', 'chatlog'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        _results.push(this.socket.on(e, function(r) {
          return _this["receive_" + e](r);
        }));
      }
      return _results;
    };

    Network.prototype.send_joinroom = function() {
      if (this.name == null) {
        this.name = prompt('Your name', 'Player');
      }
      if (this.room == null) {
        this.room = prompt('Room', 'lobby');
      }
      this.socket.emit('joinroom', {
        room: this.room,
        name: this.name
      });
      return this.game.mode.init.call(this.game);
    };

    Network.prototype.send_chatmsg = function(msg) {
      return this.socket.emit('chatmsg', {
        name: this.name,
        msg: msg
      });
    };

    Network.prototype.receive_welcome = function(data) {
      this.id = data != null ? data.id : void 0;
      this.role = data != null ? data.role : void 0;
      this.connected = true;
      return this.send_joinroom();
    };

    Network.prototype.receive_playerlist = function(data) {
      var n, _i, _len, _ref;
      _ref = data.split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        this.game.addPlayer({
          name: n
        });
      }
    };

    Network.prototype.receive_chatlog = function(data) {
      var messages;
      messages = JSON.parse(data);
      if (messages != null) {
        this.game.chat.messages = messages;
      }
      return this.game.chat.draw();
    };

    Network.prototype.receive_chatmsg = function(data) {
      var message;
      message = JSON.parse(data);
      if (message != null) {
        this.game.chat.messages.push = message;
      }
      return this.game.chat.draw();
    };

    Network.prototype.receive_canvaspage = function(data) {
      this.game.drawingArea.drawing = data.lines;
      return this.game.drawingArea.draw();
    };

    Network.prototype.receive_canvasline = function(data) {
      this.game.drawingArea.drawing.push(data.line);
      return this.game.drawingArea.drawLine(data.line);
    };

    return Network;

  })();
});

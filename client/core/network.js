// Generated by CoffeeScript 1.4.0

define(function() {
  var Network;
  return Network = (function() {

    Network.prototype.connected = false;

    Network.prototype.game = null;

    Network.prototype.socket = null;

    Network.prototype.id = null;

    Network.prototype.name = null;

    Network.prototype.role = null;

    Network.prototype.room = 'lobby';

    Network.prototype.whoseTurn = null;

    function Network(params) {
      var k, v;
      for (k in params) {
        v = params[k];
        this[k] = v;
      }
      if (this.game == null) {
        throw 'game was not set!';
      }
      if (this.socket == null) {
        throw 'socket was not set!';
      }
      this.registerClientEvents();
      this.send_hello();
    }

    Network.prototype.registerClientEvents = function() {
      var _this = this;
      this.socket.on('welcome', function(d) {
        return _this.receive_welcome(d);
      });
      this.socket.on('playerlist', function(d) {
        return _this.receive_playerlist(d);
      });
      this.socket.on('playeradd', function(d) {
        return _this.receive_playeradd(d);
      });
      this.socket.on('playerremove', function(d) {
        return _this.receive_playerremove(d);
      });
      this.socket.on('canvaspage', function(d) {
        return _this.receive_canvaspage(d);
      });
      this.socket.on('canvasline', function(d) {
        return _this.receive_canvasline(d);
      });
      this.socket.on('chatlog', function(d) {
        return _this.receive_chatlog(d);
      });
      this.socket.on('chatmsg', function(d) {
        return _this.receive_chatmsg(d);
      });
      this.socket.on('words', function(d) {
        return _this.receive_words(d);
      });
    };

    Network.prototype.send_hello = function() {
      return this.socket.emit('hello');
    };

    Network.prototype.send_joinroom = function() {
      if (this.name == null) {
        this.name = prompt('Your name', 'Player');
      }
      if (this.room == null) {
        this.room = prompt('Room', 'lobby');
      }
      this.socket.emit('joinroom', {
        room: this.room,
        name: this.name
      });
      return this.game.mode.init.call(this.game);
    };

    Network.prototype.send_chatmsg = function(msg) {
      this.socket.emit('chatmsg', {
        name: this.name,
        msg: msg
      });
    };

    Network.prototype.receive_welcome = function(data) {
      this.id = data != null ? data.id : void 0;
      this.role = data != null ? data.role : void 0;
      this.connected = true;
      return this.send_joinroom();
    };

    Network.prototype.receive_playerlist = function(data) {
      var name, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        name = data[_i];
        _results.push(this.game.addPlayer({
          name: name
        }));
      }
      return _results;
    };

    Network.prototype.receive_chatlog = function(data) {
      if (data != null) {
        this.game.chat.messages = data;
        return this.game.chat.draw();
      }
    };

    Network.prototype.receive_chatmsg = function(data) {
      if (data != null) {
        return this.game.chat.add(data);
      }
    };

    Network.prototype.receive_canvaspage = function(data) {
      if (data != null) {
        this.game.drawingArea.drawing = data;
        return this.game.drawingArea.draw();
      }
    };

    Network.prototype.receive_canvasline = function(data) {
      this.game.drawingArea.drawing.push(data.line);
      return this.game.drawingArea.drawLine(data.line);
    };

    Network.prototype.receive_words = function(data) {
      switch (this.role) {
        case 'g':
          break;
        case 'd':
          return this.game.predrawingArea.add(data);
      }
    };

    return Network;

  })();
});
